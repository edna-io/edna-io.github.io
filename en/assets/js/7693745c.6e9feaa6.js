"use strict";(self.webpackChunkedna_docs=self.webpackChunkedna_docs||[]).push([[2518],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=i,g=p["".concat(l,".").concat(m)]||p[m]||c[m]||r;return t?a.createElement(g,o(o({ref:n},d),{},{components:t})):a.createElement(g,o({ref:n},d))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=p;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var u=2;u<r;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},94118:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>u,toc:()=>c});var a=t(87462),i=(t(67294),t(3905)),r=t(65488),o=t(85162);const s={sidebar_position:3},l="Configuring Notifications",u={unversionedId:"getting-started/notifications",id:"version-4.11.0/getting-started/notifications",title:"Configuring Notifications",description:"You need to configure notifications and add meta information about data store:",source:"@site/i18n/en/docusaurus-plugin-content-docs-android/version-4.11.0/getting-started/notifications.md",sourceDirName:"getting-started",slug:"/getting-started/notifications",permalink:"/en/android/4.11.0/getting-started/notifications",draft:!1,tags:[],version:"4.11.0",lastUpdatedAt:1671018581,formattedLastUpdatedAt:"Dec 14, 2022",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Configuration",permalink:"/en/android/4.11.0/getting-started/usage"},next:{title:"Graphic Scheme",permalink:"/en/android/4.11.0/getting-started/graphics"}},d={},c=[{value:"Additional Info",id:"additional-info",level:4},{value:"Firebase",id:"firebase",level:2},{value:"Adding google-services.json",id:"adding-google-servicesjson",level:3},{value:"Configuring Manifest",id:"configuring-manifest",level:3},{value:"Push Notifications",id:"push-notifications",level:3},{value:"Huawei Media Services (HMS)",id:"huawei-media-services-hms",level:2},{value:"Enabling Push Notifications",id:"enabling-push-notifications",level:3},{value:"Integration with Push Lite",id:"integration-with-push-lite",level:2}],p={toc:c};function m(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuring-notifications"},"Configuring Notifications"),(0,i.kt)("p",null,"You need to configure notifications and add meta information about data store:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Permissions:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<permission android:name="${applicationId}.permission.pushserver.RECEIVE"\n            android:protectionLevel="signature" />\n<uses-permission android:name="android.permission.INTERNET" />\n<uses-permission android:name="${applicationId}.permission.pushserver.RECEIVE" />\n')),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"Meta information:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<meta-data\n    android:name="im.threads.getServerUrl"\n    android:value="YOUR_DATASTORE_URL" />\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"YOUR_DATASTORE_URL")," parameter will be issued to you once you connect."),(0,i.kt)("h4",{id:"additional-info"},"Additional Info"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Enabling of debug logging of the push library:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<meta-data\n    android:name="com.pushserver.android.logs"\n    android:value="true"/>\n')),(0,i.kt)("h2",{id:"firebase"},"Firebase"),(0,i.kt)("p",null,"For push notifications to work correctly, you need to define the heir in the application ",(0,i.kt)("a",{parentName:"p",href:"https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService"},"https://firebase.google.com/docs/reference/android/com/google/firebase/messaging/FirebaseMessagingService"),".\nTo pass the token in the respective methods of the heir, use ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatCenterPushMessageHelper.setFcmToken(...)"),".\nTo process an incoming push notification, use ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatCenterPushMessageHelper.process(...)"),". This method will only process the push notifications that contain origin=threads, i.e. the edna Chat Center membership flag."),(0,i.kt)("h3",{id:"adding-google-servicesjson"},"Adding google-services.json"),(0,i.kt)("p",null,"The following two options are possible:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Using your Firebase account, generate a ",(0,i.kt)("inlineCode",{parentName:"li"},"google-services.json")," file. To get registered in the syste, specify your ",(0,i.kt)("inlineCode",{parentName:"li"},"project_number")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"API_KEY")," from the Firebase console (not from ",(0,i.kt)("inlineCode",{parentName:"li"},"google-services.json"),")."),(0,i.kt)("li",{parentName:"ul"},"Using your Firebase account, specify yuor app's ",(0,i.kt)("inlineCode",{parentName:"li"},"applicationId"),", and we'll send you the ",(0,i.kt)("inlineCode",{parentName:"li"},"google-services.json")," file.")),(0,i.kt)("p",null,"You need to add the ",(0,i.kt)("inlineCode",{parentName:"p"},"google-services.json")," file to the project next to ",(0,i.kt)("inlineCode",{parentName:"p"},"AndroidManifest.xml")),(0,i.kt)("h3",{id:"configuring-manifest"},"Configuring Manifest"),(0,i.kt)("p",null,"Registering a handler:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<service android:name=".push.CustomPushFcmIntentService"\n    android:exported="false">\n    <intent-filter>\n        <action android:name="com.google.firebase.MESSAGING_EVENT" />\n    </intent-filter>\n</service>\n')),(0,i.kt)("h3",{id:"push-notifications"},"Push Notifications"),(0,i.kt)("p",null,"When receiving information from Firebase, you need to save it to the library. You also need to register a handler for new messages. For that, you need to redefine the ",(0,i.kt)("inlineCode",{parentName:"p"},"FirebaseMessagingService")," class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class CustomPushFcmIntentService : FirebaseMessagingService() {\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n        ChatCenterPushMessageHelper.setFcmToken(token)\n    }\n    override fun onMessageReceived(message: RemoteMessage) {\n        super.onMessageReceived(message)\n        ChatCenterPushMessageHelper.process(this, message.data)\n    }\n}\n")),(0,i.kt)("p",null,"Also, you need to pass the key from Firbase push notifications. You can do it via the manifest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<meta-data\n    android:name="im.threads.threadsGateProviderUid"\n    android:value="YOUR_THREADS_GATE_FCM_PROVIDER_UID"/>\n')),(0,i.kt)("p",null,"or by calling a respective method when creating Transport Config at the time of library connection:"),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"kotlin",values:[{label:"Kotlin",value:"kotlin"},{label:"Java",value:"java"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"kotlin",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class ThreadsDemoApplication : Application() {\n  override fun onCreate() {\n        super.onCreate()\n        val configBuilder = ConfigBuilder(this) // this - android context  \n        val transportConfig = getTransportConfig(this)  \n        configBuilder.threadsGateProviderUid(transportConfig.threadsGateProviderUid)  \n            \n        ThreadsLib.init(configBuilder)\n  }\n  \n  fun getTransportConfig(ctx: Context?): TransportConfig? {  \n        // ...\n        val threadsGateProviderUid =  \n            sharedPreferences.getString(PREF_THREADS_GATE_PROVIDER_UID, null)  \n                ?: return null  \n       \n        return TransportConfig(  \n            // ...\n            threadsGateProviderUid\n        )  \n  }  \n}\n"))),(0,i.kt)(o.Z,{value:"java",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public class ThreadsDemoApplication extends Application {\n    @Override\n    void onCreate() {\n        ConfigBuilder configBuilder = new ConfigBuilder(this); // this - android context  \n        TransportConfig transportConfig = getTransportConfig(this);\n        configBuilder.threadsGateProviderUid(transportConfig.threadsGateProviderUid);\n    \n        ThreadsLib.init(configBuilder);\n   }\n\n  TransportConfig getTransportConfig(Context ctx) {\n        // ...\n        String threadsGateProviderUid =\n                sharedPreferences.getString(PREF_THREADS_GATE_PROVIDER_UID, null)\n                ?: return null;\n        \n        return new TransportConfig(\n                // ...\n                threadsGateProviderUid\n        );\n  }\n}\n")))),(0,i.kt)("h2",{id:"huawei-media-services-hms"},"Huawei Media Services (HMS)"),(0,i.kt)("h3",{id:"enabling-push-notifications"},"Enabling Push Notifications"),(0,i.kt)("p",null,"The configuration process is similar to the one for Firebase. "),(0,i.kt)("p",null,"Add HMS to the project ",(0,i.kt)("a",{parentName:"p",href:"https://developer.huawei.com/consumer/en/codelab/HMSPushKit/index.html"},"https://developer.huawei.com/consumer/en/codelab/HMSPushKit/index.html"),". "),(0,i.kt)("p",null,"When you receive information from Huawei, you need to save it to the library. You also need to register a handler for new messages. For that, you need to redefine the ",(0,i.kt)("inlineCode",{parentName:"p"},"HmsMessageService")," class:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class CustomPushHcmIntentService : HmsMessageService() {\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n        ChatCenterPushMessageHelper.setHcmToken(token)\n    }\n    override fun onMessageReceived(message: RemoteMessage) {\n        super.onMessageReceived(message)\n        ChatCenterPushMessageHelper.process(\n                this,\n                CommonUtils.base64JsonStringToBundle(message.data)\n        )\n    }\n}\n")),(0,i.kt)("p",null,"Then you need to add the handler to the manifest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<service\n   android:name=".push.CustomPushHcmIntentService"\n   android:exported="false">\n   <intent-filter>\n       <action android:name="com.huawei.push.action.MESSAGING_EVENT" />\n   </intent-filter>\n</service>\n')),(0,i.kt)("h2",{id:"integration-with-push-lite"},"Integration with Push Lite"),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This section is only relevant for the projects that already use SDK push-lite to deliver push notifications.\nTo configure and integrate push-lite, follow the instructions provided with the SDK.")),(0,i.kt)("p",null,"After integration with the required push clients has been successfully completed, you can start integration with Chat Center. To do this, you need to add the following logic to transfer tokens and messages to the SDK:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For Firebase:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class CustomPushFcmIntentService : FirebaseMessagingService() {\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n        ChatCenterPushMessageHelper.setFcmToken(token)\n    }\n\n    override fun onMessageReceived(message: RemoteMessage) {\n        super.onMessageReceived(message)\n        ChatCenterPushMessageHelper.process(this, message.data)\n    }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"For HMS:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-kotlin"},"class CustomPushHcmIntentService : HmsMessageService() {\n    override fun onNewToken(token: String) {\n        super.onNewToken(token)\n        ChatCenterPushMessageHelper.setHcmToken(token)\n    }\n\n    override fun onMessageReceived(message: RemoteMessage) {\n        super.onMessageReceived(message)\n        ChatCenterPushMessageHelper.process(\n                this,\n                CommonUtils.base64JsonStringToBundle(message.data)\n        )\n    }\n}\n")),(0,i.kt)("p",null,"After that, you need to add the declaration of both services to the manifest:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},'<service android:name=".push.CustomPushFcmIntentService"\n   android:exported="false">\n   <intent-filter>\n       <action android:name="com.google.firebase.MESSAGING_EVENT" />\n   </intent-filter>\n</service>\n\n<service\n   android:name=".push.CustomPushHcmIntentService"\n   android:exported="false">\n   <intent-filter>\n       <action android:name="com.huawei.push.action.MESSAGING_EVENT" />\n   </intent-filter>\n</service>\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Take note of adding the ",(0,i.kt)("inlineCode",{parentName:"p"},"PushController.getInstance(this).init()")," method to ",(0,i.kt)("inlineCode",{parentName:"p"},"Application.onCreate()")," that occurs in step 1.2.3 of the push-lite documentation.")))}m.isMDXComponent=!0},85162:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(67294),i=t(86010);const r="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:t},n)}},65488:(e,n,t)=>{t.d(n,{Z:()=>m});var a=t(87462),i=t(67294),r=t(86010),o=t(72389),s=t(67392),l=t(7094),u=t(12466);const d="tabList__CuJ",c="tabItem_LNqP";function p(e){var n,t;const{lazy:o,block:p,defaultValue:m,values:g,groupId:h,className:f}=e,v=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=g?g:v.map((e=>{let{props:{value:n,label:t,attributes:a}}=e;return{value:n,label:t,attributes:a}})),b=(0,s.l)(k,((e,n)=>e.value===n.value));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const C=null===m?m:null!=(n=null!=m?m:null==(t=v.find((e=>e.props.default)))?void 0:t.props.value)?n:v[0].props.value;if(null!==C&&!k.some((e=>e.value===C)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+k.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:y}=(0,l.U)(),[T,w]=(0,i.useState)(C),E=[],{blockElementScrollPositionUntilNextRender:P}=(0,u.o5)();if(null!=h){const e=N[h];null!=e&&e!==T&&k.some((n=>n.value===e))&&w(e)}const S=e=>{const n=e.currentTarget,t=E.indexOf(n),a=k[t].value;a!==T&&(P(n),w(a),null!=h&&y(h,String(a)))},M=e=>{var n;let t=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{var a;const n=E.indexOf(e.currentTarget)+1;t=null!=(a=E[n])?a:E[0];break}case"ArrowLeft":{var i;const n=E.indexOf(e.currentTarget)-1;t=null!=(i=E[n])?i:E[E.length-1];break}}null==(n=t)||n.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":p},f)},k.map((e=>{let{value:n,label:t,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:e=>E.push(e),onKeyDown:M,onClick:S},o,{className:(0,r.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),o?(0,i.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},v.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==T})))))}function m(e){const n=(0,o.Z)();return i.createElement(p,(0,a.Z)({key:String(n)},e))}}}]);