"use strict";(self.webpackChunkedna_docs=self.webpackChunkedna_docs||[]).push([[8809],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=n[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},51962:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>l,metadata:()=>u,toc:()=>c});var a=n(87462),i=(n(67294),n(3905)),r=n(65488),o=n(85162);const l={sidebar_position:3},s="Configuration",u={unversionedId:"getting-started/usage",id:"version-4.5.2/getting-started/usage",title:"Configuration",description:"Initialization",source:"@site/i18n/en/docusaurus-plugin-content-docs-ios/version-4.5.2/getting-started/usage.md",sourceDirName:"getting-started",slug:"/getting-started/usage",permalink:"/en/ios/4.5.2/getting-started/usage",draft:!1,tags:[],version:"4.5.2",lastUpdatedAt:1663600961,formattedLastUpdatedAt:"Sep 19, 2022",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"mainSidebar",previous:{title:"Installation",permalink:"/en/ios/4.5.2/getting-started/installation"},next:{title:"Configuring Notifications",permalink:"/en/ios/4.5.2/getting-started/notifications"}},d={},c=[{value:"Initialization",id:"initialization",level:2},{value:"User Installation",id:"user-installation",level:3},{value:"User&#39;s Logout",id:"users-logout",level:3},{value:"Show Chat Screen",id:"show-chat-screen",level:3},{value:"How to Open Chat Screen",id:"how-to-open-chat-screen",level:2},{value:"1. Via Push Method in Code",id:"1-via-push-method-in-code",level:3},{value:"2. Via Present Method in Code",id:"2-via-present-method-in-code",level:3},{value:"3. Via Show Method in Storyboard",id:"3-via-show-method-in-storyboard",level:3},{value:"4. Integration on UITabBarController Tab in Code",id:"4-integration-on-uitabbarcontroller-tab-in-code",level:3},{value:"5. Integration on UITabBarController Tab in Storyboard",id:"5-integration-on-uitabbarcontroller-tab-in-storyboard",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"configuration"},"Configuration"),(0,i.kt)("h2",{id:"initialization"},"Initialization"),(0,i.kt)("p",null,"In the\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"application:didFinishLaunchingWithOptions:")," method,\xa0configure an SDK Threads instance:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"configureTransportProtocol"),"\xa0- Message delivery protocol:")),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"You need to get the following configuration parameters from your implementation manager:"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"providerUid")," - App ID "),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"webSocketURL")," - URL to connect to the chat through WebSocket API"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"restURL")," - URL for calls to REST API"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dataStoreURL")," - URL to upload files via DataStore API (before 4.2 - ",(0,i.kt)("inlineCode",{parentName:"li"},"fileUploadingURL"),")"))),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Starting with 4.2, the following parameter is enabled in the SDK by default:\n",(0,i.kt)("inlineCode",{parentName:"p"},"threads.attributes.newChatCenterApi = true")),(0,i.kt)("p",{parentName:"admonition"},"If you have not changed this parameter before, then you have an old scheme and you need to set the value to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"obj-c"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"import Threads\n\n@UIApplicationMain\nclass AppDelegate: UIResponder, UIApplicationDelegate {\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n    \n    // Step 1: Configure Threads Framework\n    let threads = Threads.threads()\n    threads.isDebugLoggingEnabled = true\n    \n    threads.configureThreadsGateTransportProtocol(\n            with: self,\n            providerUid: \"PROVIDER_UID\",\n            webSocketURL: URL(string: 'URL to WebSocket API')!,\n            restURL: URL(string: 'URL to REST API')!,\n            dataStoreURL: URL(string: 'URL to DataStore API'))!\n    \n    // Step 2: Register device for remote notifications\n    UNUserNotificationCenter.current().delegate = self\n\n    Threads.threads().registerApplicationForRemoteNotificationsStandartOptions(authorizationStatusDenied: {\n        // Handle deny notifications\n    }) { deviceToken in\n        // Handle received device token if needed\n    }\n        \n    return true\n}\n"))),(0,i.kt)(o.Z,{value:"obj-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'#import <Threads/Threads.h>\n\n@interface AppDelegate () <UNUserNotificationCenterDelegate, ThreadsDelegate>\n@end\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    // Step 1: Configure Threads Framework\n    Threads *threads = [Threads threads];\n    threads.isDebugLoggingEnabled = YES;\n    \n    [threads configureThreadsGateTransportProtocolWithDelegate:self\n                                                   providerUid:@"PROVIDER_UID"\n                                                   webSocketURL: [NSURL URLWithString:@"URL to WebSocket API"]\n                                                   restURL: [NSURL URLWithString:@"URL to REST API"]\n                                                   dataStoreURL: [NSURL URLWithString:@"URL to DataStore API"]];\n    \n    // Step 2: Register device for remote notifications\n    [UNUserNotificationCenter currentNotificationCenter].delegate = self;\n\n    [[Threads threads] registerApplicationForRemoteNotificationsStandartOptionsWithAuthorizationStatusDenied:^{\n        // Handle deny notifications\n    } completionHandler:^(NSData * _Nullable deviceToken) {\n        // Handle received device token if needed\n    }];\n        \n    return YES;\n}\n')))),(0,i.kt)("h3",{id:"user-installation"},"User Installation"),(0,i.kt)("p",null,"Use the following method:\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"setClientWithId:name:data:appMarker:signature:")),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let clientInfo = THRClientInfo(clientId: CLIENT_ID)\nclientInfo.name = CLIENT_NAME\nclientInfo.data = CLIENT_DATA\nclientInfo.appMarker = APP_MARKER\nclientInfo.signature = SIGNATURE\nThreads.threads().setClientInfo(clientInfo)\n"))),(0,i.kt)(o.Z,{value:"objective-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"THRClientInfo *clientInfo = [[THRClientInfo alloc] initWithClientId:CLIENT_ID];\nclientInfo.name = CLIENT_NAME;\nclientInfo.data = CLIENT_DATA;\nclientInfo.appMarker = APP_MARKER;\nclientInfo.signature = SIGNATURE;\n[[Threads threads] setClientInfo:clientInfo];\n")))),(0,i.kt)("p",null,"where:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CLIENT_ID"),"\xa0- Unique client's identifier. This parameter is required."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CLIENT_NAME"),"\xa0- Client's name. This parameter is optional."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"CLIENT_DATA"),"\xa0- JSON string with client data. This parameter is optional."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"APP_MARKER"),"\xa0- Identifier for ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/ThreadsMobileLib/edna-sdk-ios/wiki/%D0%9C%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D1%87%D0%B0%D1%82"},"multichat"),"; pass ",(0,i.kt)("inlineCode",{parentName:"li"},"null")," only, if not used."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SIGNATURE"),"\xa0- Authorization signature clientId. At the moment, this parameter is optional, verification is enabled on the Threads server. The signature must be generated on your authorization server based on clientId using the RSA private key, then encrypted in Base64. For the general scheme of working with the signature, refer to the backend documentation.")),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"CLIENT_ID must be unique and always refer to the same user. Avoid using phone numbers, email addresses, and other identifiers linked to user data as an identifier.")),(0,i.kt)("h3",{id:"users-logout"},"User's Logout"),(0,i.kt)("p",null,"Logout must be executed when the app is supposed to stop receiving messages for users. For example, when users log out of the app."),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Upon\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"clientId"),"\xa0change, automatic logout is not executed.")),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"Threads.threads().logout()\n\u0438\u043b\u0438\nThreads.threads().logout(withClientId: clientId)\n"))),(0,i.kt)(o.Z,{value:"objective-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"[[Threads threads] logout];\n\u0438\u043b\u0438\n[[Threads threads] logoutWithClientId:client.id];\n")))),(0,i.kt)("h3",{id:"show-chat-screen"},"Show Chat Screen"),(0,i.kt)("p",null,"To show the chat screen, you need to receive the\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"chatViewController")," parameter \xa0with indication of appearance parameters\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"THRAttrubutes"),". The received controller can be displayed in any native way:"),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let attributes = THRAttributes()\nlet vc = Threads.threads().chatViewController(with: attributes)\nnavigationController?.pushViewController(vc, animated: true)\n"))),(0,i.kt)(o.Z,{value:"objective-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"THRAttributes *attributes = [[THRAttributes alloc] init];\nUIViewController *vc = [[Threads threads] chatViewControllerWithAttributes:attributes];\n[self.navigationController pushViewController:vc animated:YES];\n")))),(0,i.kt)("h2",{id:"how-to-open-chat-screen"},"How to Open Chat Screen"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Examples in the demo app")),(0,i.kt)("p",null,"All chat opening options are implemented on\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"Objective-C"),"\xa0and\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"Swift"),"\xa0in the corresponding examples in the \xa0",(0,i.kt)("inlineCode",{parentName:"p"},"IntegrationsViewController")," class."),(0,i.kt)("h3",{id:"1-via-push-method-in-code"},"1. Via Push Method in Code"),(0,i.kt)("p",null,"How to open the chat screen using the Push method in current\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"UINavigationController"),"."),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let vc = Threads.threads().chatViewController(with: attributes)\nnavigationController?.pushViewController(vc, animated: true)\n"))),(0,i.kt)(o.Z,{value:"objective-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"UIViewController *vc = [[Threads threads] chatViewControllerWithAttributes:attributes];\n[self.navigationController pushViewController:vc animated:YES];\n")))),(0,i.kt)("h3",{id:"2-via-present-method-in-code"},"2. Via Present Method in Code"),(0,i.kt)("p",null,"In this case, you need to place the chat in\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"UINavigationController"),"."),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"let vc = Threads.threads().chatViewController(with: attributes)\nlet nc = UINavigationController(rootViewController: vc)\npresent(nc, animated: true, completion: nil)\n"))),(0,i.kt)(o.Z,{value:"objective-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"UIViewController *vc = [[Threads threads] chatViewControllerWithAttributes:attributes];\nUINavigationController *nc = [[UINavigationController alloc] initWithRootViewController:chatViewController];\n[self presentViewController:nc animated:YES completion:nil];\n")))),(0,i.kt)("h3",{id:"3-via-show-method-in-storyboard"},"3. Via Show Method in Storyboard"),(0,i.kt)("p",null,"To open the chat screen using the Show method (for example, Push), you need to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Create a child of\xa0",(0,i.kt)("inlineCode",{parentName:"li"},"ChatNavigationController")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"UINavigationController"),"."),(0,i.kt)("li",{parentName:"ol"},"Set the created class as\xa0",(0,i.kt)("inlineCode",{parentName:"li"},"Custom Class"),"\xa0for the required scene of ",(0,i.kt)("inlineCode",{parentName:"li"},"UINavigationController")," in Storyboard."),(0,i.kt)("li",{parentName:"ol"},"Create a ",(0,i.kt)("inlineCode",{parentName:"li"},"Segue")," connection\xa0to the created\xa0scene of ",(0,i.kt)("inlineCode",{parentName:"li"},"ChatNavigationController"),".\nExample of ",(0,i.kt)("inlineCode",{parentName:"li"},"ChatNavigationController"),"\xa0implementation:")),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"class ChatNavigationController.m: UINavigationController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.viewControllers = [self.getChatViewController()]\n    }\n    \n    func getAttributes() -> THRAttributes {\n        let attributes = THRAttributes()\n        attributes.showWaitingForSpecialistProgress = false\n        return attributes\n    }\n    \n    func getChatViewController() -> UIViewController {\n        let attributes = getAttributes()\n        let chatViewController = Threads.threads().chatViewController(with: attributes)\n        return chatViewController\n    }\n}\n\n"))),(0,i.kt)(o.Z,{value:"objective-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},"class ChatNavigationController.m: UINavigationController {\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        self.viewControllers = [self.getChatViewController()]\n    }\n    \n    func getAttributes() -> THRAttributes {\n        let attributes = THRAttributes()\n        attributes.showWaitingForSpecialistProgress = false\n        return attributes\n    }\n    \n    func getChatViewController() -> UIViewController {\n        let attributes = getAttributes()\n        let chatViewController = Threads.threads().chatViewController(with: attributes)\n        return chatViewController\n    }\n}\n")))),(0,i.kt)("h3",{id:"4-integration-on-uitabbarcontroller-tab-in-code"},"4. Integration on UITabBarController Tab in Code"),(0,i.kt)("p",null,"Integration method is similar to\xa0",(0,i.kt)("em",{parentName:"p"},"chat opening using the Present method"),",\xa0since you need to place the chat into\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"UINavigationController"),"."),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],mdxType:"Tabs"},(0,i.kt)(o.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'let vc = Threads.threads().chatViewController(with: attributes)\n        \nlet nc = UINavigationController(rootViewController: chatViewController)\nnc.tabBarItem = UITabBarItem(title: NSLocalizedString("Chat", comment: ""), image: UIImage(named: "tabBarItemChat"), tag: 0)\n    \nlet tabBarController = UITabBarController()\ntabBarController.viewControllers = [nc]\n'))),(0,i.kt)(o.Z,{value:"objective-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'UIViewController *vc = [[Threads threads] chatViewControllerWithAttributes:attributes];\n\nUINavigationController *nc = [[UINavigationController alloc] initWithRootViewController:vc];\nnc.tabBarItem = [[UITabBarItem alloc] initWithTitle:NSLocalizedString(@"Chat", "") image:[UIImage imageNamed:@"tabBarItemChat"] tag:0];\n    \nUITabBarController *tabBarController = [[UITabBarController alloc] init];\ntabBarController.viewControllers = @[nc];\n')))),(0,i.kt)("h3",{id:"5-integration-on-uitabbarcontroller-tab-in-storyboard"},"5. Integration on UITabBarController Tab in Storyboard"),(0,i.kt)("p",null,"To integrate the chat as a tab via\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"Storyboard"),", you need\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"ChatNavigationController"),"\xa0from\xa0",(0,i.kt)("em",{parentName:"p"},"How to Open Chat Screen via Show Method in Storyboard"),"."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Set the scene of\xa0",(0,i.kt)("inlineCode",{parentName:"li"},"UINavigationController")),(0,i.kt)("li",{parentName:"ol"},"Set ",(0,i.kt)("inlineCode",{parentName:"li"},"Custom Class"),"\xa0-\xa0",(0,i.kt)("inlineCode",{parentName:"li"},"ChatNavigationController"),","),(0,i.kt)("li",{parentName:"ol"},"Create a connection of\xa0",(0,i.kt)("inlineCode",{parentName:"li"},"viewControllers")," from ",(0,i.kt)("inlineCode",{parentName:"li"},"UITabBarController")," to ",(0,i.kt)("inlineCode",{parentName:"li"},"ChatNavigationController"),".")))}m.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),i=n(86010);const r="tabItem_Ymn6";function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,o),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),i=n(67294),r=n(86010),o=n(72389),l=n(67392),s=n(7094),u=n(12466);const d="tabList__CuJ",c="tabItem_LNqP";function p(e){var t,n;const{lazy:o,block:p,defaultValue:m,values:h,groupId:g,className:b}=e,v=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=h?h:v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),C=(0,l.l)(f,((e,t)=>e.value===t.value));if(C.length>0)throw new Error('Docusaurus error: Duplicate values "'+C.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const k=null===m?m:null!=(t=null!=m?m:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==k&&!f.some((e=>e.value===k)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+f.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:w}=(0,s.U)(),[T,I]=(0,i.useState)(k),y=[],{blockElementScrollPositionUntilNextRender:U}=(0,u.o5)();if(null!=g){const e=N[g];null!=e&&e!==T&&f.some((t=>t.value===e))&&I(e)}const S=e=>{const t=e.currentTarget,n=y.indexOf(t),a=f[n].value;a!==T&&(U(t),I(a),null!=g&&w(g,String(a)))},A=e=>{var t;let n=null;switch(e.key){case"Enter":S(e);break;case"ArrowRight":{var a;const t=y.indexOf(e.currentTarget)+1;n=null!=(a=y[t])?a:y[0];break}case"ArrowLeft":{var i;const t=y.indexOf(e.currentTarget)-1;n=null!=(i=y[t])?i:y[y.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":p},b)},f.map((e=>{let{value:t,label:n,attributes:o}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:e=>y.push(e),onKeyDown:A,onClick:S},o,{className:(0,r.Z)("tabs__item",c,null==o?void 0:o.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),o?(0,i.cloneElement)(v.filter((e=>e.props.value===T))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==T})))))}function m(e){const t=(0,o.Z)();return i.createElement(p,(0,a.Z)({key:String(t)},e))}}}]);