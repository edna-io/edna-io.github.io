"use strict";(self.webpackChunkedna_docs=self.webpackChunkedna_docs||[]).push([["93075"],{12785:function(e,i,n){n.r(i),n.d(i,{frontMatter:()=>a,toc:()=>d,default:()=>h,metadata:()=>t,assets:()=>l,contentTitle:()=>o});var t=JSON.parse('{"id":"migration/migration_guides","title":"Migration Guide","description":"Migration to 4.0.0","source":"@site/i18n/en/docusaurus-plugin-content-docs-ios/version-4.39.0/migration/migration_guides.md","sourceDirName":"migration","slug":"/migration/migration_guides","permalink":"/en/ios/4.39.0/migration/migration_guides","draft":false,"unlisted":false,"tags":[],"version":"4.39.0","lastUpdatedAt":1756192703000,"frontMatter":{},"sidebar":"mainSidebar","previous":{"title":"\u041C\u0438\u0433\u0440\u0430\u0446\u0438\u044F","permalink":"/en/ios/4.39.0/category/\u043C\u0438\u0433\u0440\u0430\u0446\u0438\u044F"},"next":{"title":"Demo App","permalink":"/en/ios/4.39.0/demo"}}'),r=n(85893),s=n(50065);let a={},o="Migration Guide",l={},d=[{value:"Migration to 4.0.0",id:"migration-to-400",level:2},{value:"Installation via CocoaPods",id:"installation-via-cocoapods",level:3},{value:"Threads Configuration",id:"threads-configuration",level:3},{value:"MFMSPushLiteDelegate -&gt; ThreadsDelegate",id:"mfmspushlitedelegate---threadsdelegate",level:3},{value:"Setting up Receiving Push Notifications",id:"setting-up-receiving-push-notifications",level:3},{value:"Registering User",id:"registering-user",level:3},{value:"Chat Opening",id:"chat-opening",level:3},{value:"<strong>Appearance Configuration</strong>",id:"appearance-configuration",level:3},{value:"Additional Capabilities",id:"additional-capabilities",level:2},{value:"Counter of Unread Messages -&gt; ThreadsDelegate",id:"counter-of-unread-messages---threadsdelegate",level:3}];function c(e){let i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(i.header,{children:(0,r.jsx)(i.h1,{id:"migration-guide",children:"Migration Guide"})}),"\n",(0,r.jsx)(i.h2,{id:"migration-to-400",children:"Migration to 4.0.0"}),"\n",(0,r.jsx)(i.p,{children:"In version 4.0.0, the integration and work with the push library was reworked."}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["The ",(0,r.jsx)(i.code,{children:"MFMSPushLite"})," library was moved inside\xa0",(0,r.jsx)(i.code,{children:"Threads"}),", all interaction now only occurs through it."]}),"\n",(0,r.jsxs)(i.li,{children:[(0,r.jsx)(i.code,{children:"UIViewController"})," is now provided to show the chat."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"installation-via-cocoapods",children:"Installation via CocoaPods"}),"\n",(0,r.jsxs)(i.p,{children:["If you are installing\xa0",(0,r.jsx)(i.code,{children:"Threads"}),"via",(0,r.jsx)(i.code,{children:"CocoaPods"}),", remove manual installation of\xa0",(0,r.jsx)(i.code,{children:"MFMSPushLite"}),". Now the dependency is pulled up automatically."]}),"\n",(0,r.jsx)(i.h3,{id:"threads-configuration",children:"Threads Configuration"}),"\n",(0,r.jsxs)(i.p,{children:["Replace all calls to static methods of the ",(0,r.jsx)(i.code,{children:"Threads"})," class to address the\xa0",(0,r.jsx)(i.code,{children:"[Threads threads]"})," singleton."]}),"\n",(0,r.jsxs)(i.p,{children:["In\xa0",(0,r.jsx)(i.code,{children:"Application didFinishLaunchingWithOptions"}),",\xa0",(0,r.jsx)(i.strong,{children:"before you register push"}),", add the\xa0",(0,r.jsx)(i.code,{children:"Threads"})," configuration method. It contains MFMSPushLite configuration:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:'Threads *threads = [Threads threads];\n\n[threads configureWithDelegate:self\n          productionMFMSServer:YES\n                    historyURL:[NSURL URLWithString:@"HISTORY_URL"]\n              fileUploadingURL:[NSURL URLWithString:@"FILE_UPLOADING_URL"]];\n'})}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["From ",(0,r.jsx)(i.code,{children:"Info.plist"}),", remove ",(0,r.jsx)(i.code,{children:"PS_API_CONFIG"}),"\xa0with the following parameters:\xa0",(0,r.jsx)(i.code,{children:"PS_FILE_UPLOAD_URL"}),",\xa0",(0,r.jsx)(i.code,{children:"PS_HISTORY_URL"}),",\xa0",(0,r.jsx)(i.code,{children:"PS_CLIENTID_IS_ENCRYPTED"}),". These parameters are no longer set in plist, only in code."]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"mfmspushlitedelegate---threadsdelegate",children:"MFMSPushLiteDelegate -> ThreadsDelegate"}),"\n",(0,r.jsxs)(i.p,{children:["Implementation of ",(0,r.jsx)(i.code,{children:"MFMSPushLiteDelegate"})," replace with implementation of\xa0",(0,r.jsx)(i.code,{children:"ThreadsDelegate"}),"\xa0and a parameter:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:["Transfer the switching of the production/test push platform from the ",(0,r.jsx)(i.code,{children:"(BOOL)isProductionWithPushApi:(MFMSPushLite * _Nonnull)pushApi"})," method to the\xa0",(0,r.jsx)(i.code,{children:"productionMFMSServer"})," parameter"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["\n",(0,r.jsxs)(i.p,{children:["Transfer implementation of\xa0",(0,r.jsx)(i.code,{children:"MFMSPushLiteDelegate"})," methods"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"- (id<PushServerApiConfigDataSource>)configWithPushApi:(MFMSPushLite *)pushApi;\n\n- (void)onPushMessagesReceivedWithPushApi:(MFMSPushLite *)PushApi messages:(NSArray<PushNotificationMessage *> *)messages;\n\n- (void)onErrorWithPushApi:(MFMSPushLite *)PushApi error:(NSString *)error;\n"})}),"\n",(0,r.jsxs)(i.p,{children:["To the corresponding\xa0",(0,r.jsx)(i.code,{children:"ThreadsDelegate"})," methods:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"- (id<PushServerApiConfigDataSource>)threads:(Threads *)threads configurePushServerApiFor:(MFMSPushLite *)mfmsPushLite;\n- (void)threads:(Threads *)threads didReceiveFullMessages:(NSArray<PushNotificationMessage *> *)messages;\n- (void)threads:(Threads *)threads didReceiveError:(NSError *)error;\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h3,{id:"setting-up-receiving-push-notifications",children:"Setting up Receiving Push Notifications"}),"\n",(0,r.jsx)(i.p,{children:"Replace the push registration code:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-swift",children:"if (@available(iOS 10, *)) {\n    UNUserNotificationCenter *center = [UNUserNotificationCenter currentNotificationCenter];\n    center.delegate = self;\n    [center requestAuthorizationWithOptions:(UNAuthorizationOptionSound | UNAuthorizationOptionAlert | UNAuthorizationOptionBadge) completionHandler:^(BOOL granted, NSError * _Nullable error){\n        if(!error){\n            dispatch_async(dispatch_get_main_queue(), ^{\n                [[UIApplication sharedApplication] registerForRemoteNotifications];\n            });\n        }\n    }];\n} else {\n    [[UIApplication sharedApplication] registerForRemoteNotifications];\n}\n"})}),"\n",(0,r.jsx)(i.p,{children:"With the following:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:'[Threads threads] registerApplicationForRemoteNotificationsStandartOptionsWithAuthorizationStatusDenied:^{\n    NSLog(@"Remote notifications denied");\n} completionHandler:^(NSData * _Nullable deviceToken) {\n    NSLog(@"Application registered for remote notifications %@", deviceToken);\n}];\n'})}),"\n",(0,r.jsxs)(i.p,{children:["Replace the implementation of methods for processing registration and receiving push messages with the following\xa0",(0,r.jsx)(i.code,{children:"Threads"})," calls:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"- (void)application:(UIApplication *)application didRegisterUserNotificationSettings:(UIUserNotificationSettings *)notificationSettings {\n    [[Threads threads] applicationDidRegisterUserNotificationSettings:notificationSettings];\n}\n\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [[Threads threads] applicationDidRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    [[Threads threads] applicationDidFailToRegisterForRemoteNotificationsWithError:error];\n}\n\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Replace the ",(0,r.jsx)(i.code,{children:"[Threads didReceiveFullPush:...]"})," call, now push messages are passed directly inside the library. If you use your own push notifications, you can get them in the delegate method\xa0",(0,r.jsx)(i.code,{children:"ThreadsDelegate"}),":"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"- (void)threads:(Threads *)threads didReceiveFullMessages:(NSArray<PushNotificationMessage *> *)messages;\n"})}),"\n",(0,r.jsx)(i.h3,{id:"registering-user",children:"Registering User"}),"\n",(0,r.jsxs)(i.p,{children:["Remove the\xa0",(0,r.jsx)(i.code,{children:"[Threads registerClientWithCompletion:^(BOOL state)]"})," call, it has been deprecated."]}),"\n",(0,r.jsx)(i.p,{children:"Replace the client parameter setting:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"[Threads setClientId:(NSString*) clientId]\n[Threads setClientName:(NSString*) clientName]\n[Threads setData:(NSString*) data]\n[Threads setAppMarker:  appMarker]\n[Threads setClientIdSignature: (NSString*) clientIdSignature]\n"})}),"\n",(0,r.jsx)(i.p,{children:"With the client installation method:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"[[Threads threads] setClientWithId:(NSString *) clientId\n                              name:(NSString * _Nullable) clientName\n                              data:(NSDictionary * _Nullable) clientDataDict\n                         appMarker:(NSString * _Nullable) clientAppMarker\n                         signature:(NSString *) clientSignature];\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Note that ",(0,r.jsx)(i.code,{children:"data"})," is now passed as a dictionary and not a string."]}),"\n",(0,r.jsx)(i.h3,{id:"chat-opening",children:"Chat Opening"}),"\n",(0,r.jsx)(i.p,{children:"Replace the calls of the methods:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"[Threads show];\n"})}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"[Threads showInView:(UIView *)view parentController:(UIViewController *)parentController;\n"})}),"\n",(0,r.jsxs)(i.p,{children:["With receiving full ",(0,r.jsx)(i.code,{children:"UIViewController"})," that you can present in any native way, for example:"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"THRAttributes *attributes = [[THRAttributes alloc] init];\nUIViewController *chatViewController = [[Threads threads] chatViewControllerWithAttributes:attributes];\n[self.navigationController pushViewController:chatViewController animated:YES];\n"})}),"\n",(0,r.jsxs)(i.p,{children:["Other examples:\xa0",(0,r.jsx)(i.a,{href:"/i18n/en/docusaurus-plugin-content-docs-ios/current/getting-started/usage",children:"Ways to Open Chat Screen"})]}),"\n",(0,r.jsx)(i.h3,{id:"appearance-configuration",children:(0,r.jsx)(i.strong,{children:"Appearance Configuration"})}),"\n",(0,r.jsx)(i.p,{children:"Transfer the parameters of the chat welcome screen texts:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:'[Threads setHelloTitle:@"\u0417\u0430\u0433\u043E\u043B\u043E\u0432\u043E\u043A"]\n[Threads setHelloDescription:@"\u041E\u043F\u0438\u0441\u0430\u043D\u0438\u0435"]\n'})}),"\n",(0,r.jsxs)(i.p,{children:["To the\xa0",(0,r.jsx)(i.code,{children:"THRAttributes"})," parameters:"]}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"helloTitle"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"helloDescription"})}),"\n"]}),"\n",(0,r.jsx)(i.p,{children:"Remove the following parameters and methods - due to transition to ViewController, they became irrelevant and were removed:"}),"\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsxs)(i.li,{children:["THRAttributes","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"navigationBarBackgroundColor"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"navigationBarTintColor"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"navigationBarItemFont"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"shouldAnimateShowNavigation"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"shouldAnimatePopNavigation"})}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(i.li,{children:["Threads:","\n",(0,r.jsxs)(i.ul,{children:["\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"showToolbarAnimated"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"hideToolbarAnimated"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"showKeyboard"})}),"\n",(0,r.jsx)(i.li,{children:(0,r.jsx)(i.code,{children:"hideKeyboard"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(i.h2,{id:"additional-capabilities",children:"Additional Capabilities"}),"\n",(0,r.jsx)(i.h3,{id:"counter-of-unread-messages---threadsdelegate",children:"Counter of Unread Messages -> ThreadsDelegate"}),"\n",(0,r.jsx)(i.p,{children:"Transfer the processing of getting the number of unread messages from the block:"}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"[[Threads threads] setUnreadedMessagesCountChanged:^(NSInteger messagesCount)\n"})}),"\n",(0,r.jsxs)(i.p,{children:["To implementation of the ",(0,r.jsx)(i.code,{children:"ThreadsDelegate"}),"method\xa0 :"]}),"\n",(0,r.jsx)(i.pre,{children:(0,r.jsx)(i.code,{className:"language-objectivec",children:"- (void)threads:(Threads *)threads unreadMessagesCount:(NSUInteger)unreadMessagesCount;\n"})})]})}function h(e={}){let{wrapper:i}={...(0,s.a)(),...e.components};return i?(0,r.jsx)(i,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},50065:function(e,i,n){n.d(i,{Z:()=>o,a:()=>a});var t=n(67294);let r={},s=t.createContext(r);function a(e){let i=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function o(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);