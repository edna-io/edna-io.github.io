"use strict";(self.webpackChunkedna_docs=self.webpackChunkedna_docs||[]).push([["86304"],{60930:function(e,i,t){t.r(i),t.d(i,{frontMatter:()=>l,toc:()=>u,default:()=>h,metadata:()=>n,assets:()=>d,contentTitle:()=>c});var n=JSON.parse('{"id":"getting-started/notifications","title":"Configuring Notifications","description":"After the initial initialization is complete, you need to add the following SDK calls to enable push notifications:","source":"@site/i18n/en/docusaurus-plugin-content-docs-ios/version-4.37.0/getting-started/notifications.md","sourceDirName":"getting-started","slug":"/getting-started/notifications","permalink":"/en/ios/4.37.0/getting-started/notifications","draft":false,"unlisted":false,"tags":[],"version":"4.37.0","lastUpdatedAt":1751633423000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"mainSidebar","previous":{"title":"Configuration","permalink":"/en/ios/4.37.0/getting-started/usage"},"next":{"title":"Methods and Properties","permalink":"/en/ios/4.37.0/getting-started/methods"}}'),o=t(85893),r=t(50065),a=t(47902),s=t(5525);let l={sidebar_position:4},c="Configuring Notifications",d={},u=[];function p(e){let i={admonition:"admonition",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.header,{children:(0,o.jsx)(i.h1,{id:"configuring-notifications",children:"Configuring Notifications"})}),"\n",(0,o.jsx)(i.p,{children:"After the initial initialization is complete, you need to add the following SDK calls to enable push notifications:"}),"\n",(0,o.jsxs)(a.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],children:[(0,o.jsx)(s.Z,{value:"swift",children:(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-swift",children:"// MARK: - Remote Notifications\n    \nfunc application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n    Threads.threads().applicationDidRegisterForRemoteNotifications(withDeviceToken: deviceToken)\n}\n\n// MARK: - UNUserNotificationCenterDelegate\n\nfunc userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n    // Check for application launched from notification\n    if response.actionIdentifier == UNNotificationDefaultActionIdentifier {\n        let userInfo = response.notification.request.content.userInfo\n        if Threads.threads().isThreadsOriginPushUserInfo(userInfo) {\n            // Application launched from Threads notification\n        } else {\n            // Application launched from other notifications\n        }\n    }\n    completionHandler()\n}\n"})})}),(0,o.jsx)(s.Z,{value:"objective-c",children:(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectivec",children:"#pragma mark - Remote Notifications\n\n- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n    [[Threads threads] applicationDidRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n}\n\n- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n    [[Threads threads] applicationDidFailToRegisterForRemoteNotificationsWithError:error];\n}\n\n#pragma mark - UNUserNotificationCenterDelegate\n\n- (void)userNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void(^)(void))completionHandler API_AVAILABLE(ios(10.0)){\n    // Check for application launched from notification\n    if ([response.actionIdentifier isEqualToString: UNNotificationDefaultActionIdentifier]) {\n        NSDictionary *userInfo = response.notification.request.content.userInfo;\n        if ([[Threads threads] isThreadsOriginPushUserInfo:userInfo]) {\n            // Application launched from Threads notification\n        } else {\n            // Application launched from other notifications\n        }\n    }\n    completionHandler();\n}\n"})})})]}),"\n",(0,o.jsx)(i.h1,{id:"integration-with-push-lite",children:"Integration with Push Lite"}),"\n",(0,o.jsxs)(i.admonition,{type:"note",children:[(0,o.jsx)(i.p,{children:"This section is only relevant for projects that already use the push-lite SDK to deliver notifications."}),(0,o.jsx)(i.p,{children:"To configure and integrate push-lite, follow the instructions provided with the SDK."})]}),"\n",(0,o.jsx)(i.p,{children:"Initialization of the Chat Center library must go first:"}),"\n",(0,o.jsxs)(a.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],children:[(0,o.jsx)(s.Z,{value:"swift",children:(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-swift",children:'    func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n        \n        // Step 1: Configure Threads Framework\n        let threads = Threads.threads()\n        threads.registrationAtStartupDisable = SettingsBundleHelper.getRegistrationAtStartupDisable()\n        threads.isClientIdEncrypted = Configuration.clientIdEncrypted()\n        \n        threads.isShowsNetworkActivity = true\n        \n        guard let providerUid = Configuration.providerUid() else { fatalError("Set providerUid for threadsGate transportProtocol.") }\n        threads.configureTransportProtocol(\n            with: self,\n            webSocketURL: URL(string: Configuration.webSocketURL())!,\n            providerUid: providerUid,\n            restURL: URL(string: Configuration.restServerURL())!,\n            dataStoreURL: URL(string: Configuration.dataStoreURL())!\n        )\n        \n        // Step 2: Configure PushLite Framework\n        pushLite = EDNAPushLite(delegate: self)\n        pushLite.appGroup = "group.io.edna.chatcenter.demo"\n        pushLite.autoRegisterForNotification = false\n        pushLite.logEnable = true\n        pushLite.start()\n        \n        // Step 3: Register device for remote notifications\n        ...\n\n        return true\n    }\n'})})}),(0,o.jsx)(s.Z,{value:"objective-c",children:(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectivec",children:'- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n    \n    // Step 1: Configure Threads Framework\n    Threads *threads = [Threads threads];\n    threads.isDebugLoggingEnabled = YES;\n    \n    [threads configureTransportProtocolWithDelegate:self\n                                                   providerUid:@"PROVIDER_UID"\n                                                   webSocketURL: [NSURL URLWithString:@"\u0421\u0441\u044B\u043B\u043A\u0430 \u043D\u0430 WebSocket API"]\n                                                   restURL: [NSURL URLWithString:@"\u0421\u0441\u044B\u043B\u043A\u0430 \u043D\u0430 REST API"]\n                                                   dataStoreURL: [NSURL URLWithString:@"\u0421\u0441\u044B\u043B\u043A\u0430 \u043D\u0430 DataStore API"]];\n    \n    // Step 2: Configure PushLite Framework\n    pushLite = [[EDNAPushLite alloc] initWithDelegate: self];\n    pushLite.appGroup = @"group.io.edna.chatcenter.demo";\n    pushLite.autoRegisterForNotification = NO;\n    pushLite.logEnable = YES;\n    [pushLite start];\n        \n    // Step 3: Register device for remote notifications\n    ...\n        \n    return YES;\n}\n'})})})]}),"\n",(0,o.jsx)(i.p,{children:"The values from the notification delegates are passed in the same order:"}),"\n",(0,o.jsxs)(a.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],children:[(0,o.jsx)(s.Z,{value:"swift",children:(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-swift",children:"    func application(_ application: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {\n        Threads.threads().applicationDidRegisterForRemoteNotifications(withDeviceToken: deviceToken)\n        pushLite.appDelegate.didRegisterForRemoteNotifications(withDeviceToken: deviceToken)\n    }\n    \n    func application(_ application: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {\n        pushLite.appDelegate.didFailToRegisterForRemoteNotifications(withError: error)\n    }\n"})})}),(0,o.jsx)(s.Z,{value:"objective-c",children:(0,o.jsx)(i.pre,{children:(0,o.jsx)(i.code,{className:"language-objectivec",children:"    - (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {\n        [[Threads threads] applicationDidRegisterForRemoteNotificationsWithDeviceToken:deviceToken];\n        [[pushLite appDelegate] didRegisterForRemoteNotificationsWithDeviceToken: deviceToken];\n    }\n\n    - (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {\n        [[pushLite appDelegate] didFailToRegisterForRemoteNotificationsWithError: error];\n    }\n"})})})]})]})}function h(e={}){let{wrapper:i}={...(0,r.a)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},5525:function(e,i,t){t.d(i,{Z:()=>r});var n=t(85893);t(67294);var o=t(67026);function r({children:e,hidden:i,className:t}){return(0,n.jsx)("div",{role:"tabpanel",className:(0,o.Z)("tabItem_Ymn6",t),hidden:i,children:e})}},47902:function(e,i,t){t.d(i,{Z:()=>b});var n=t(85893),o=t(67294),r=t(67026),a=t(69599),s=t(16550),l=t(32e3),c=t(4520),d=t(38341),u=t(76009);function p(e){return o.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){let{props:i}=e;return!!i&&"object"==typeof i&&"value"in i}(e))return e;throw Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function h({value:e,tabValues:i}){return i.some(i=>i.value===e)}var f=t(7227);function g({className:e,block:i,selectedValue:t,selectValue:o,tabValues:s}){let l=[],{blockElementScrollPositionUntilNextRender:c}=(0,a.o5)(),d=e=>{let i=e.currentTarget,n=s[l.indexOf(i)].value;n!==t&&(c(i),o(n))},u=e=>{let i=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{let t=l.indexOf(e.currentTarget)+1;i=l[t]??l[0];break}case"ArrowLeft":{let t=l.indexOf(e.currentTarget)-1;i=l[t]??l[l.length-1]}}i?.focus()};return(0,n.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":i},e),children:s.map(({value:e,label:i,attributes:o})=>(0,n.jsx)("li",{role:"tab",tabIndex:t===e?0:-1,"aria-selected":t===e,ref:e=>{l.push(e)},onKeyDown:u,onClick:d,...o,className:(0,r.Z)("tabs__item","tabItem_LNqP",o?.className,{"tabs__item--active":t===e}),children:i??e},e))})}function m({lazy:e,children:i,selectedValue:t}){let a=(Array.isArray(i)?i:[i]).filter(Boolean);if(e){let e=a.find(e=>e.props.value===t);return e?(0,o.cloneElement)(e,{className:(0,r.Z)("margin-top--md",e.props.className)}):null}return(0,n.jsx)("div",{className:"margin-top--md",children:a.map((e,i)=>(0,o.cloneElement)(e,{key:i,hidden:e.props.value!==t}))})}function v(e){let i=function(e){let{defaultValue:i,queryString:t=!1,groupId:n}=e,r=function(e){let{values:i,children:t}=e;return(0,o.useMemo)(()=>{let e=i??p(t).map(({props:{value:e,label:i,attributes:t,default:n}})=>({value:e,label:i,attributes:t,default:n})),n=(0,d.lx)(e,(e,i)=>e.value===i.value);if(n.length>0)throw Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`);return e},[i,t])}(e),[a,f]=(0,o.useState)(()=>(function({defaultValue:e,tabValues:i}){if(0===i.length)throw Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:i}))throw Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${i.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}let t=i.find(e=>e.default)??i[0];if(!t)throw Error("Unexpected error: 0 tabValues");return t.value})({defaultValue:i,tabValues:r})),[g,m]=function({queryString:e=!1,groupId:i}){let t=(0,s.k6)(),n=function({queryString:e=!1,groupId:i}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!i)throw Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return i??null}({queryString:e,groupId:i});return[(0,c._X)(n),(0,o.useCallback)(e=>{if(!n)return;let i=new URLSearchParams(t.location.search);i.set(n,e),t.replace({...t.location,search:i.toString()})},[n,t])]}({queryString:t,groupId:n}),[v,b]=function({groupId:e}){let i=e?`docusaurus.tab.${e}`:null,[t,n]=(0,u.Nk)(i);return[t,(0,o.useCallback)(e=>{i&&n.set(e)},[i,n])]}({groupId:n}),N=(()=>{let e=g??v;return h({value:e,tabValues:r})?e:null})();return(0,l.Z)(()=>{N&&f(N)},[N]),{selectedValue:a,selectValue:(0,o.useCallback)(e=>{if(!h({value:e,tabValues:r}))throw Error(`Can't select invalid tab value=${e}`);f(e),m(e),b(e)},[m,b,r]),tabValues:r}}(e);return(0,n.jsxs)("div",{className:(0,r.Z)("tabs-container","tabList__CuJ"),children:[(0,n.jsx)(g,{...i,...e}),(0,n.jsx)(m,{...i,...e})]})}function b(e){let i=(0,f.Z)();return(0,n.jsx)(v,{...e,children:p(e.children)},String(i))}},50065:function(e,i,t){t.d(i,{Z:()=>s,a:()=>a});var n=t(67294);let o={},r=n.createContext(o);function a(e){let i=n.useContext(r);return n.useMemo(function(){return"function"==typeof e?e(i):{...i,...e}},[i,e])}function s(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(r.Provider,{value:i},e.children)}}}]);