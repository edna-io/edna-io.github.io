"use strict";(self.webpackChunkedna_docs=self.webpackChunkedna_docs||[]).push([[9703],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,g=p["".concat(s,".").concat(m)]||p[m]||c[m]||r;return n?a.createElement(g,l(l({ref:t},d),{},{components:n})):a.createElement(g,l({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=p;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},32656:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>u,toc:()=>c});var a=n(87462),i=(n(67294),n(3905)),r=n(65488),l=n(85162);const o={sidebar_position:1},s="Advanced Settings",u={unversionedId:"advanced/advanced",id:"version-4.9.0/advanced/advanced",title:"Advanced Settings",description:"Logging",source:"@site/i18n/en/docusaurus-plugin-content-docs-ios/version-4.9.0/advanced/advanced.md",sourceDirName:"advanced",slug:"/advanced/",permalink:"/en/ios/4.9.0/advanced/",draft:!1,tags:[],version:"4.9.0",lastUpdatedAt:1669386332,formattedLastUpdatedAt:"Nov 25, 2022",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"mainSidebar",previous:{title:"\u0420\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435 \u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438",permalink:"/en/ios/4.9.0/category/\u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u043d\u044b\u0435-\u043d\u0430\u0441\u0442\u0440\u043e\u0439\u043a\u0438"},next:{title:"Appearance and Behavior Customization",permalink:"/en/ios/4.9.0/advanced/ui"}},d={},c=[{value:"Logging",id:"logging",level:4},{value:"Debug Screen",id:"debug-screen",level:3},{value:"ThreadsDelegate",id:"threadsdelegate",level:3},{value:"Number of Unread Messages",id:"number-of-unread-messages",level:4},{value:"Errors Processing",id:"errors-processing",level:4},{value:"Opening Chat upon Tapping Push Notification",id:"opening-chat-upon-tapping-push-notification",level:4},{value:"Programmed Message Sending",id:"programmed-message-sending",level:3},{value:"Text Message",id:"text-message",level:4},{value:"Image",id:"image",level:4},{value:"Using Certificates",id:"using-certificates",level:3},{value:"SSL Pinning",id:"ssl-pinning",level:4},{value:"Working with Untrusted Certificates",id:"working-with-untrusted-certificates",level:4},{value:"Notifications about User Actions",id:"notifications-about-user-actions",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"advanced-settings"},"Advanced Settings"),(0,i.kt)("h4",{id:"logging"},"Logging"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Threads.threads().attributes.logLevels = .off")," - Enables/disables logging. As a value, class LogLevel with support of the OptionSet(Swift) protocol or NS_OPTIONS(Objective-C) is used.")),(0,i.kt)("p",null,"Possible values of LogLevel are as follows:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"- off (all logging levels are disabled);\n- info (general level);\n- network (network level);\n- network-sock (network level, socket);\n- user-interface (user interface);\n- error (all);\n- all (all of the above levels are enabled);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    let logLevelValue = (LogLevel.network.rawValue | LogLevel.networkSock.rawValue)\n    Threads.threads().attributes.logLevels = LogLevel(rawValue: logLevelValue)\n")),(0,i.kt)("p",null,'If at least one log level is enabled, the event stream is sent to the system OSLog with the "im.threads.logs" identifier and can be observed through both the XCode terminal and the Console in macOS.'),(0,i.kt)("p",null,'Simultaneously with OSLog, events are recorded to a file on the device. Default name is Threads.log. Storage: .documentDirectory/Logs (NSSearchPathForDirectoriesInDomains(.documentDirectory, .userDomainMask, true) + "/Logs"). You can forcibly disable logging to a file on the device. To do this, pass ',(0,i.kt)("inlineCode",{parentName:"p"},"nil")," in the file name attribute settings:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},"    Threads.threads().attributes.logFileName = nil \n")),(0,i.kt)("p",null,"Settings for the log recording file on the device:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'Threads.threads().attributes.logFileName: String? = "Threads"'),' - Log file name, default is "Threads" (if nil is passed, logs will not be recorded to the file);'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Threads.threads().attributes.logFileSizeMb: Int = 1")," - Maximum file size in megabytes, by default - 1;"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Threads.threads().attributes.logFileMaxCount: Int = 7")," - Maximum number of log files in rotation, by default - 7. If exceeded, the oldest one will be overwritten.")),(0,i.kt)("h3",{id:"debug-screen"},"Debug Screen"),(0,i.kt)("p",null,"In some cases, you might need the debug mode that can provide some useful information. Currently, the library can log all push notification received from the moment the app is launched. To enable the debug screen, launch the app with the following preset attributes: "),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attributes.navigationBarVisible = YES;")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"attributes.canShowDebugScreen = YES;"))),(0,i.kt)("h3",{id:"threadsdelegate"},"ThreadsDelegate"),(0,i.kt)("h4",{id:"number-of-unread-messages"},"Number of Unread Messages"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"- (void)threads:(Threads *)threads unreadMessagesCount:(NSUInteger)unreadMessagesCount;")),(0,i.kt)("h4",{id:"errors-processing"},"Errors Processing"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"- (void)threads:(Threads *)threads didReceiveError:(NSError *)error;")),(0,i.kt)("h4",{id:"opening-chat-upon-tapping-push-notification"},"Opening Chat upon Tapping Push Notification"),(0,i.kt)("p",null,"To check whether the notification was opened by tapping a ",(0,i.kt)("inlineCode",{parentName:"p"},"Threads")," push notification, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"isThreadsOriginPushUserInfo")," method:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift",metastring:'title="AppDelegate.swift"',title:'"AppDelegate.swift"'},"extension AppDelegate: UNUserNotificationCenterDelegate {\n  @available(iOS 10.0, *)\n  func userNotificationCenter(_ center: UNUserNotificationCenter, didReceive response: UNNotificationResponse, withCompletionHandler completionHandler: @escaping () -> Void) {\n      // Check for application launched from notification\n      if response.actionIdentifier == UNNotificationDefaultActionIdentifier {\n          let userInfo = response.notification.request.content.userInfo\n          if Threads.threads().isThreadsOriginPushUserInfo(userInfo) {\n              // Application launched from Threads notification\n          } else {\n              // Application launched from other notifications\n          }\n      }\n      completionHandler()\n  } \n}\n")),(0,i.kt)("h3",{id:"programmed-message-sending"},"Programmed Message Sending"),(0,i.kt)("h4",{id:"text-message"},"Text Message"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'let text = "Hello, World!"\n\nThreads.threads().sendMessage(withText: text) { [weak self] (error) in\n  if let error = error {\n      // handle error\n  } else {\n      // handle success     \n  }\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Limitation: 4,000 characters."),(0,i.kt)("p",{parentName:"admonition"},"Use example:\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"TextMessageSwiftViewController.swift"),",\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"TextMessageObjcViewController.m"))),(0,i.kt)("h4",{id:"image"},"Image"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'let image = UIImage(named: "helloWorld")\n\nThreads.threads().sendMessage(with: image) { [weak self] (error) in\n  if let error = error {\n      // handle error\n  } else {\n      // handle success     \n  }\n}\n')),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Limit by default: 30 MB "),(0,i.kt)("p",{parentName:"admonition"},"See the use example in ",(0,i.kt)("inlineCode",{parentName:"p"},"PictureMessageSwiftViewController.swift")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"PictureMessageObjcViewController.m"))),(0,i.kt)("h3",{id:"using-certificates"},"Using Certificates"),(0,i.kt)("h4",{id:"ssl-pinning"},"SSL Pinning"),(0,i.kt)("p",null,"It allows you to use a specified list of certificates to check whether they match the certificates on the server. The certificates themselves must be enclosed in the application bundle in the DER encoding.\nIf the list is not empty, the\xa0",(0,i.kt)("inlineCode",{parentName:"p"},"allowUntrustedSSLCertificate"),"\xa0setting will be ignored."),(0,i.kt)("admonition",{type:"danger"},(0,i.kt)("p",{parentName:"admonition"},"When utilizing this functionality, we do not recommend using only one certificate. If it is revoked or expired, SDK will stop connecting to the server. Use backup certificates and update them timely.")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[Threads threads].attributes.trustedCertificates")," - An empty array by default. ")),(0,i.kt)(r.Z,{groupId:"ios-language",defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Objective-C",value:"objective-c"}],mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"swift",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-swift"},'Threads.threads().attributes.trustedCertificates = [\n    THRCert(contentsOf: Bundle.main.url(forResource: "GUTS_2022.cer", withExtension: nil)),\n    THRCert(contentsOf: Bundle.main.url(forResource: "guts.2022.cer", withExtension: nil)),\n    THRCert(contentsOfFile: "guts_22.cer"),\n    THRCert(contentsOfFile: "guts.22.cer")\n'))),(0,i.kt)(l.Z,{value:"objective-c",mdxType:"TabItem"},(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-objectivec"},'[Threads threads].attributes.trustedCertificates = @[\n    [[THRCert alloc] initWithContentsOf: [NSBundle.mainBundle URLForResource:@"GUTS_2022.cer" withExtension:nil]],\n    [[THRCert alloc] initWithContentsOf: [NSBundle.mainBundle URLForResource:@"guts.2022.cer" withExtension:nil]],\n    [[THRCert alloc] initWithContentsOfFile:@"guts_22.cer"],\n    [[THRCert alloc] initWithContentsOfFile:@"guts.22.cer"]\n];\n')))),(0,i.kt)("h4",{id:"working-with-untrusted-certificates"},"Working with Untrusted Certificates"),(0,i.kt)("p",null,"It regulates validation of server certificates in the SDK. If the ",(0,i.kt)("inlineCode",{parentName:"p"},"trustedCertificatesList")," setting is activated, this setting is ignored and the exact compliance of certificates from the specified list is checked."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[Threads threads].attributes.allowUntrustedSSLCertificate = [YES | NO]"),"\xa0- Disabled by default. ")),(0,i.kt)("h3",{id:"notifications-about-user-actions"},"Notifications about User Actions"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},'"Threads.Controls.DidClickCloseButton"')," - Notification sent when the user clicks on the chat close button.")))}m.isMDXComponent=!0},85162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(67294),i=n(86010);const r="tabItem_Ymn6";function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,l),hidden:n},t)}},65488:(e,t,n)=>{n.d(t,{Z:()=>m});var a=n(87462),i=n(67294),r=n(86010),l=n(72389),o=n(67392),s=n(7094),u=n(12466);const d="tabList__CuJ",c="tabItem_LNqP";function p(e){var t,n;const{lazy:l,block:p,defaultValue:m,values:g,groupId:f,className:h}=e,v=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=g?g:v.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,o.l)(b,((e,t)=>e.value===t.value));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.');const w=null===m?m:null!=(t=null!=m?m:null==(n=v.find((e=>e.props.default)))?void 0:n.props.value)?t:v[0].props.value;if(null!==w&&!b.some((e=>e.value===w)))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+b.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");const{tabGroupChoices:N,setTabGroupChoices:y}=(0,s.U)(),[C,T]=(0,i.useState)(w),S=[],{blockElementScrollPositionUntilNextRender:O}=(0,u.o5)();if(null!=f){const e=N[f];null!=e&&e!==C&&b.some((t=>t.value===e))&&T(e)}const x=e=>{const t=e.currentTarget,n=S.indexOf(t),a=b[n].value;a!==C&&(O(t),T(a),null!=f&&y(f,String(a)))},E=e=>{var t;let n=null;switch(e.key){case"Enter":x(e);break;case"ArrowRight":{var a;const t=S.indexOf(e.currentTarget)+1;n=null!=(a=S[t])?a:S[0];break}case"ArrowLeft":{var i;const t=S.indexOf(e.currentTarget)-1;n=null!=(i=S[t])?i:S[S.length-1];break}}null==(t=n)||t.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",d)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":p},h)},b.map((e=>{let{value:t,label:n,attributes:l}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:C===t?0:-1,"aria-selected":C===t,key:t,ref:e=>S.push(e),onKeyDown:E,onClick:x},l,{className:(0,r.Z)("tabs__item",c,null==l?void 0:l.className,{"tabs__item--active":C===t})}),null!=n?n:t)}))),l?(0,i.cloneElement)(v.filter((e=>e.props.value===C))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},v.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==C})))))}function m(e){const t=(0,l.Z)();return i.createElement(p,(0,a.Z)({key:String(t)},e))}}}]);